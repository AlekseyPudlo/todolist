{"version":3,"sources":["components/CloseButton.jsx","components/NavItem.jsx","components/CustomButton.jsx","components/NavPanel.jsx","components/Checkbox.jsx","components/TodoItems.jsx","components/TextInput.jsx","components/ListItem.jsx","components/Popup.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CloseButton","_ref","onClick","react_default","a","createElement","type","className","NavItem","_this$props","this","props","getListToShow","removeList","lists","map","list","shortListName","components_CloseButton","Component","CustomButton","text","Object","objectWithoutProperties","assign","value","NavPanel","togglePopup","components_CustomButton","components_NavItem","Checkbox","_ref$type","TodoItems","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","item","target","name","isChecked","checked","setState","prevState","checkedItems","set","state","Map","_this2","Fragment","items","element","key","components_Checkbox","get","onChange","TextInput","autoFocus","ListItem","addItem","updateList","listUpdated","concat","toConsumableArray","newItem","handleSubmit","preventDefault","alert","closeList","prevProps","listCopy","onSubmit","id","listName","components_TextInput","placeholder","maxLength","components_TodoItems","Popup","shortName","length","slice","discard","createList","keyCounter","showPopup","title","App","newList","some","stateList","listToRender","filter","listToRemove","components_NavPanel","components_ListItem","components_Popup","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe313c72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles/CloseButton.css\";\n\nconst CloseButton = ({onClick}) => {\n\treturn (\n\t\t<button type=\"button\" className=\"close\" onClick={onClick}>\n\t\t\t&times;\n\t\t</button>\n\t);\n};\n\nexport default CloseButton;\n","import React, { Component } from \"react\";\nimport CloseButton from \"./CloseButton.jsx\";\nimport \"./styles/NavItem.css\";\n\nclass NavItem extends Component {\n\n\trender() {\n\t\tconst {getListToShow, removeList, lists } = this.props;\n\n\t\treturn lists.map(list => (\n\t\t\t<div className=\"item\">\n\t\t\t\t<span className=\"item-link\" onClick={() => getListToShow(list)}>\n\t\t\t\t\t{list.shortListName}\n\t\t\t\t</span>\n\t\t\t\t<CloseButton onClick={() => removeList(list)} />\n\t\t\t</div>\n\t\t));\n\t}\n}\n\nexport default NavItem;\n","import React from \"react\";\nimport \"./styles/CustomButton.css\";\n\nconst CustomButton = ({ text, ...props }) => {\n\treturn props.type === \"submit\" ? (\n\t\t<input className=\"custom-button\" {...props} value={text} />\n\t) : (\n\t\t<button className=\"custom-button\" {...props}>\n\t\t\t{text}\n\t\t</button>\n\t);\n};\n\nexport default CustomButton;\n","import React, { Component } from \"react\";\nimport NavItem from \"./NavItem.jsx\";\nimport CustomButton from \"./CustomButton.jsx\";\nimport \"./styles/NavPanel.css\";\n\nclass NavPanel extends Component {\n\n\trender() {\n\t\tconst { getListToShow, removeList, togglePopup, lists } = this.props;\n\t\treturn (\n\t\t\t<nav className=\"Nav-panel\">\n\t\t\t\t<CustomButton onClick={togglePopup} text=\"Create ToDo List\" />\n\t\t\t\t<NavItem\n\t\t\t\t\tlists={lists}\n\t\t\t\t\tgetListToShow={getListToShow}\n\t\t\t\t\tremoveList={removeList}\n\t\t\t\t/>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nexport default NavPanel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Checkbox = ({ type = \"checkbox\", props }) => (\n\t<input type={type} {...props} />\n);\n\nCheckbox.propTypes = {\n\ttype: PropTypes.string,\n\tname: PropTypes.string.isRequired,\n\tchecked: PropTypes.bool,\n\tonChange: PropTypes.func.isRequired\n};\n\nexport default Checkbox;\n","import React, { Component } from \"react\";\nimport Checkbox from \"./Checkbox\";\nimport \"./styles/TodoItems.css\";\n\nclass TodoItems extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcheckedItems: new Map()\n\t\t};\n\t}\n\n\thandleChange = event => {\n\t\tconst item = event.target.name;\n\t\tconst isChecked = event.target.checked;\n\t\tthis.setState(prevState => ({\n\t\t\tcheckedItems: prevState.checkedItems.set(item, isChecked)\n\t\t}));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{this.props.items.map(element => (\n\t\t\t\t\t<label key={element.key}>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tname={element.name}\n\t\t\t\t\t\t\tchecked={this.state.checkedItems.get(element.name)}\n\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{element.name}\n\t\t\t\t\t</label>\n\t\t\t\t))}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default TodoItems;\n","import React from \"react\";\nimport \"./styles/TextInput.css\";\n\nconst TextInput = props => {\n\treturn <input {...props} className=\"text-input\" autoFocus={true} />;\n};\n\nexport default TextInput;\n","import React, { Component } from \"react\";\nimport TodoItems from \"./TodoItems.jsx\";\nimport CloseButton from \"./CloseButton.jsx\";\nimport CustomButton from \"./CustomButton.jsx\";\nimport TextInput from \"./TextInput.jsx\";\nimport \"./styles/ListItem.css\";\n\nclass ListItem extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnewItem: {\n\t\t\t\tname: \"\",\n\t\t\t\tisChecked: false\n\t\t\t}\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\t// Typical usage (don't forget to compare props):\n\t\tif (this.props !== prevProps) {\n\t\t\tthis.setState({\n\t\t\t\tnewItem: {\n\t\t\t\t\tname: \"\",\n\t\t\t\t\tisChecked: false\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\taddItem = () => {\n\t\tconst { list, updateList} = this.props;\n\t\tlet listUpdated = list;\n\t\tlistUpdated.items = [...list.items, this.state.newItem];\n\t\tupdateList(listUpdated);\n\t};\n\n\thandleChange = event => {\n\t\tthis.setState({\n\t\t\tnewItem: {\n\t\t\t\tname: event.target.value,\n\t\t\t\tisChecked: false,\n\t\t\t},\n\t\t});\n\t};\n\n\thandleSubmit = event => {\n\t\tevent.preventDefault();\n\t\tthis.state.newItem.name\n\t\t\t? this.addItem()\n\t\t\t: alert(\"Items Name cannot be empty!..\");\n\t};\n\n\tcloseList = () => this.props.getListToShow(null);\n\n\trender() {\n\t\tconst listCopy = this.props.list;\n\t\treturn !listCopy ? null : (\n\t\t\t<form className=\"list\" onSubmit={this.handleSubmit}>\n\t\t\t\t<div id=\"list-title\" className=\"flex-nowrap\">\n\t\t\t\t\t<h2>{listCopy.listName}</h2>\n\t\t\t\t\t<CloseButton onClick={this.closeList} />\n\t\t\t\t</div>\n\t\t\t\t<div id=\"add-list-input\">\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tvalue={this.state.newItem.name}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Type your task here...\"\n\t\t\t\t\t\tmaxLength={40}\n\t\t\t\t\t/>\n\t\t\t\t\t<CustomButton type=\"submit\" text=\"ADD\" />\n\t\t\t\t</div>\n\t\t\t\t<TodoItems items={listCopy.items}/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport CustomButton from \"./CustomButton.jsx\";\nimport CloseButton from \"./CloseButton.jsx\";\nimport TextInput from \"./TextInput.jsx\";\nimport \"./styles/Popup.css\";\n\nclass Popup extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlistName: \"\",\n\t\t\tkeyCounter: 0\n\t\t};\n\t}\n\n\tshortName = name => {\n\t\treturn name.length > 9 ? name.slice(0, 9).concat(\"...\") : name;\n\t};\n\n\tdiscard = () => {\n\t\tthis.props.togglePopup();\n\t\tthis.setState({\n\t\t\tlistName: \"\"\n\t\t});\n\t};\n\n\thandleChange = event => {\n\t\tthis.setState({\n\t\t\tlistName: event.target.value\n\t\t});\n\t};\n\n\thandleSubmit = event => {\n\t\tif (event) event.preventDefault();\n\t\t!this.state.listName\n\t\t\t? alert(\"The List Name could not be empty!..\")\n\t\t\t: this.props.createList({\n\t\t\t\t\tlistName: this.state.listName,\n\t\t\t\t\tshortListName: this.shortName(this.state.listName),\n\t\t\t\t\tkey: this.state.keyCounter,\n\t\t\t\t\titems: []\n\t\t\t  });\n\t\tthis.setState({\n\t\t\tlistName: \"\",\n\t\t\tkeyCounter: this.state.keyCounter + 1\n\t\t});\n\t};\n\n\trender() {\n\t\tconst {showPopup} = this.props;\n\t\tconst title = !this.state.listName\n\t\t\t? \"a new\"\n\t\t\t: this.shortName(this.state.listName);\n\n\t\treturn !showPopup ? null : (\n\t\t\t<div className=\"popup\">\n\t\t\t\t<form className=\"popup-inner\" onSubmit={this.handleSubmit}>\n\t\t\t\t\t<div className=\"popup-title\">\n\t\t\t\t\t\t<h4>Create {title} list</h4>\n\t\t\t\t\t\t<CloseButton onClick={this.discard} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\tvalue={this.state.listName}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Type the List name please...\"\n\t\t\t\t\t\tmaxLength={16}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"button-form\">\n\t\t\t\t\t\t<CustomButton type=\"submit\" text=\"Save\" />\n\t\t\t\t\t\t<CustomButton onClick={this.discard} text=\"Discard\" />\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Popup;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavPanel from \"./components/NavPanel.jsx\";\nimport ListItem from \"./components/ListItem.jsx\";\nimport Popup from \"./components/Popup.jsx\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlists: [],\n\t\t\tshowPopup: false,\n\t\t\tlistToRender: null\n\t\t};\n\t}\n\n\ttogglePopup = () => {\n\t\tthis.setState({ showPopup: !this.state.showPopup });\n\t};\n\n\tcreateList = newList => {\n\t\tthis.state.lists.some(stateList => stateList.listName === newList.listName)\n\t\t\t? alert('There is the element with \"' + newList.listName + '\" name.')\n\t\t\t: this.setState({\n\t\t\t\t\tlists: [...this.state.lists, newList],\n\t\t\t\t\tshowPopup: !this.state.showPopup,\n\t\t\t\t\tlistToRender: newList\n\t\t\t  });\n\t};\n\n\tupdateList = list => {\n\t\tconst lists = [\n\t\t\t...this.state.lists.filter(element => element.key !== list.key),\n\t\t\tlist\n\t\t];\n\t\tthis.setState({\n\t\t\tlists\n\t\t});\n\t};\n\n\tgetListToShow = list => {\n\t\tthis.setState({\n\t\t\tlistToRender: list\n\t\t});\n\t};\n\n\tremoveList = listToRemove => {\n\t\tthis.setState(prevState => {\n\t\t\tconst lists = prevState.lists.filter(\n\t\t\t\tlist => list.key !== listToRemove.key\n\t\t\t);\n\t\t\tconst listToRender =\n\t\t\t\t!prevState.listToRender ||\n\t\t\t\tprevState.listToRender.key === listToRemove.key\n\t\t\t\t\t? null\n\t\t\t\t\t: prevState.listToRender;\n\t\t\treturn {\n\t\t\t\tlists,\n\t\t\t\tlistToRender\n\t\t\t};\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<NavPanel\n\t\t\t\t\tgetListToShow={this.getListToShow}\n\t\t\t\t\tremoveList={this.removeList}\n\t\t\t\t\ttogglePopup={this.togglePopup}\n\t\t\t\t\tlists={this.state.lists}\n\t\t\t\t/>\n\t\t\t\t<ListItem\n\t\t\t\t\tlist={this.state.listToRender}\n\t\t\t\t\tgetListToShow={this.getListToShow}\n\t\t\t\t\tupdateList={this.updateList}\n\t\t\t\t/>\n\t\t\t\t<Popup\n\t\t\t\t\tshowPopup={this.state.showPopup}\n\t\t\t\t\ttogglePopup={this.togglePopup}\n\t\t\t\t\tcreateList={this.createList}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}